// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 8 files.
  struct file {
    /// Resource file `Brandon Text W01 Medium.ttf`.
    static let brandonTextW01MediumTtf = FileResource(bundle: _R.hostingBundle, name: "Brandon Text W01 Medium", pathExtension: "ttf")
    /// Resource file `Brandon_bld.otf`.
    static let brandon_bldOtf = FileResource(bundle: _R.hostingBundle, name: "Brandon_bld", pathExtension: "otf")
    /// Resource file `Brandon_med.otf`.
    static let brandon_medOtf = FileResource(bundle: _R.hostingBundle, name: "Brandon_med", pathExtension: "otf")
    /// Resource file `Brandon_reg.otf`.
    static let brandon_regOtf = FileResource(bundle: _R.hostingBundle, name: "Brandon_reg", pathExtension: "otf")
    /// Resource file `Configurations.plist`.
    static let configurationsPlist = FileResource(bundle: _R.hostingBundle, name: "Configurations", pathExtension: "plist")
    /// Resource file `Gotham-Light.otf`.
    static let gothamLightOtf = FileResource(bundle: _R.hostingBundle, name: "Gotham-Light", pathExtension: "otf")
    /// Resource file `Settings.bundle`.
    static let settingsBundle = FileResource(bundle: _R.hostingBundle, name: "Settings", pathExtension: "bundle")
    /// Resource file `Webdings.ttf`.
    static let webdingsTtf = FileResource(bundle: _R.hostingBundle, name: "Webdings", pathExtension: "ttf")
    
    /// `bundle.URLForResource("Brandon Text W01 Medium", withExtension: "ttf")`
    static func brandonTextW01MediumTtf(_: Void) -> NSURL? {
      let fileResource = R.file.brandonTextW01MediumTtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("Brandon_bld", withExtension: "otf")`
    static func brandon_bldOtf(_: Void) -> NSURL? {
      let fileResource = R.file.brandon_bldOtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("Brandon_med", withExtension: "otf")`
    static func brandon_medOtf(_: Void) -> NSURL? {
      let fileResource = R.file.brandon_medOtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("Brandon_reg", withExtension: "otf")`
    static func brandon_regOtf(_: Void) -> NSURL? {
      let fileResource = R.file.brandon_regOtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("Configurations", withExtension: "plist")`
    static func configurationsPlist(_: Void) -> NSURL? {
      let fileResource = R.file.configurationsPlist
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("Gotham-Light", withExtension: "otf")`
    static func gothamLightOtf(_: Void) -> NSURL? {
      let fileResource = R.file.gothamLightOtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void) -> NSURL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("Webdings", withExtension: "ttf")`
    static func webdingsTtf(_: Void) -> NSURL? {
      let fileResource = R.file.webdingsTtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 6 fonts.
  struct font {
    /// Font `BrandonGrotesque-Bold`.
    static let brandonGrotesqueBold = FontResource(fontName: "BrandonGrotesque-Bold")
    /// Font `BrandonGrotesque-Medium`.
    static let brandonGrotesqueMedium = FontResource(fontName: "BrandonGrotesque-Medium")
    /// Font `BrandonText-Regular`.
    static let brandonTextRegular = FontResource(fontName: "BrandonText-Regular")
    /// Font `BrandonTextW01-Medium`.
    static let brandonTextW01Medium = FontResource(fontName: "BrandonTextW01-Medium")
    /// Font `Gotham-Light`.
    static let gothamLight = FontResource(fontName: "Gotham-Light")
    /// Font `Webdings`.
    static let webdings = FontResource(fontName: "Webdings")
    
    /// `UIFont(name: "BrandonGrotesque-Bold", size: ...)`
    static func brandonGrotesqueBold(size size: CGFloat) -> UIFont? {
      return UIFont(resource: brandonGrotesqueBold, size: size)
    }
    
    /// `UIFont(name: "BrandonGrotesque-Medium", size: ...)`
    static func brandonGrotesqueMedium(size size: CGFloat) -> UIFont? {
      return UIFont(resource: brandonGrotesqueMedium, size: size)
    }
    
    /// `UIFont(name: "BrandonText-Regular", size: ...)`
    static func brandonTextRegular(size size: CGFloat) -> UIFont? {
      return UIFont(resource: brandonTextRegular, size: size)
    }
    
    /// `UIFont(name: "BrandonTextW01-Medium", size: ...)`
    static func brandonTextW01Medium(size size: CGFloat) -> UIFont? {
      return UIFont(resource: brandonTextW01Medium, size: size)
    }
    
    /// `UIFont(name: "Gotham-Light", size: ...)`
    static func gothamLight(size size: CGFloat) -> UIFont? {
      return UIFont(resource: gothamLight, size: size)
    }
    
    /// `UIFont(name: "Webdings", size: ...)`
    static func webdings(size size: CGFloat) -> UIFont? {
      return UIFont(resource: webdings, size: size)
    }
    
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 20 images.
  struct image {
    /// Image `action`.
    static let action = ImageResource(bundle: _R.hostingBundle, name: "action")
    /// Image `action_title`.
    static let action_title = ImageResource(bundle: _R.hostingBundle, name: "action_title")
    /// Image `actions_filter_all`.
    static let actions_filter_all = ImageResource(bundle: _R.hostingBundle, name: "actions_filter_all")
    /// Image `actions_filter_mine`.
    static let actions_filter_mine = ImageResource(bundle: _R.hostingBundle, name: "actions_filter_mine")
    /// Image `agenda_title`.
    static let agenda_title = ImageResource(bundle: _R.hostingBundle, name: "agenda_title")
    /// Image `attachment`.
    static let attachment = ImageResource(bundle: _R.hostingBundle, name: "attachment")
    /// Image `attachment_large`.
    static let attachment_large = ImageResource(bundle: _R.hostingBundle, name: "attachment_large")
    /// Image `bg_actions`.
    static let bg_actions = ImageResource(bundle: _R.hostingBundle, name: "bg_actions")
    /// Image `bg_priorities`.
    static let bg_priorities = ImageResource(bundle: _R.hostingBundle, name: "bg_priorities")
    /// Image `close`.
    static let close = ImageResource(bundle: _R.hostingBundle, name: "close")
    /// Image `default_avatar`.
    static let default_avatar = ImageResource(bundle: _R.hostingBundle, name: "default_avatar")
    /// Image `delete`.
    static let delete = ImageResource(bundle: _R.hostingBundle, name: "delete")
    /// Image `group`.
    static let group = ImageResource(bundle: _R.hostingBundle, name: "group")
    /// Image `group_list`.
    static let group_list = ImageResource(bundle: _R.hostingBundle, name: "group_list")
    /// Image `logo`.
    static let logo = ImageResource(bundle: _R.hostingBundle, name: "logo")
    /// Image `priorities_filter_all`.
    static let priorities_filter_all = ImageResource(bundle: _R.hostingBundle, name: "priorities_filter_all")
    /// Image `priorities_filter_mine`.
    static let priorities_filter_mine = ImageResource(bundle: _R.hostingBundle, name: "priorities_filter_mine")
    /// Image `priority`.
    static let priority = ImageResource(bundle: _R.hostingBundle, name: "priority")
    /// Image `priority_color`.
    static let priority_color = ImageResource(bundle: _R.hostingBundle, name: "priority_color")
    /// Image `search`.
    static let search = ImageResource(bundle: _R.hostingBundle, name: "search")
    
    /// `UIImage(named: "action", bundle: ..., traitCollection: ...)`
    static func action(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.action, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "action_title", bundle: ..., traitCollection: ...)`
    static func action_title(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.action_title, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "actions_filter_all", bundle: ..., traitCollection: ...)`
    static func actions_filter_all(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.actions_filter_all, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "actions_filter_mine", bundle: ..., traitCollection: ...)`
    static func actions_filter_mine(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.actions_filter_mine, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "agenda_title", bundle: ..., traitCollection: ...)`
    static func agenda_title(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.agenda_title, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "attachment", bundle: ..., traitCollection: ...)`
    static func attachment(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.attachment, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "attachment_large", bundle: ..., traitCollection: ...)`
    static func attachment_large(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.attachment_large, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "bg_actions", bundle: ..., traitCollection: ...)`
    static func bg_actions(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bg_actions, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "bg_priorities", bundle: ..., traitCollection: ...)`
    static func bg_priorities(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bg_priorities, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.close, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "default_avatar", bundle: ..., traitCollection: ...)`
    static func default_avatar(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.default_avatar, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.delete, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "group", bundle: ..., traitCollection: ...)`
    static func group(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.group, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "group_list", bundle: ..., traitCollection: ...)`
    static func group_list(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.group_list, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.logo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "priorities_filter_all", bundle: ..., traitCollection: ...)`
    static func priorities_filter_all(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.priorities_filter_all, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "priorities_filter_mine", bundle: ..., traitCollection: ...)`
    static func priorities_filter_mine(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.priorities_filter_mine, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "priority", bundle: ..., traitCollection: ...)`
    static func priority(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.priority, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "priority_color", bundle: ..., traitCollection: ...)`
    static func priority_color(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.priority_color, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.search, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 15 nibs.
  struct nib {
    /// Nib `AgendaItemTableViewCell`.
    static let agendaItemTableViewCell = _R.nib._AgendaItemTableViewCell()
    /// Nib `AttachmentTableViewCell`.
    static let attachmentTableViewCell = _R.nib._AttachmentTableViewCell()
    /// Nib `AutoCompletionTableCell`.
    static let autoCompletionTableCell = _R.nib._AutoCompletionTableCell()
    /// Nib `CalendarViewController`.
    static let calendarViewController = _R.nib._CalendarViewController()
    /// Nib `CommentTableViewCell`.
    static let commentTableViewCell = _R.nib._CommentTableViewCell()
    /// Nib `ConversationTableViewCell`.
    static let conversationTableViewCell = _R.nib._ConversationTableViewCell()
    /// Nib `DeliverableTableViewCell`.
    static let deliverableTableViewCell = _R.nib._DeliverableTableViewCell()
    /// Nib `ItemLoadingViewController`.
    static let itemLoadingViewController = _R.nib._ItemLoadingViewController()
    /// Nib `MemberTableViewCell`.
    static let memberTableViewCell = _R.nib._MemberTableViewCell()
    /// Nib `NewMessageSeparatorCell`.
    static let newMessageSeparatorCell = _R.nib._NewMessageSeparatorCell()
    /// Nib `OrganizationTableViewCell`.
    static let organizationTableViewCell = _R.nib._OrganizationTableViewCell()
    /// Nib `StartOfConversationView`.
    static let startOfConversationView = _R.nib._StartOfConversationView()
    /// Nib `StreamTableViewCell`.
    static let streamTableViewCell = _R.nib._StreamTableViewCell()
    /// Nib `TimelineAgendaItemTableViewCell`.
    static let timelineAgendaItemTableViewCell = _R.nib._TimelineAgendaItemTableViewCell()
    /// Nib `TimelineDeliverableTableViewCell`.
    static let timelineDeliverableTableViewCell = _R.nib._TimelineDeliverableTableViewCell()
    
    /// `UINib(name: "AgendaItemTableViewCell", bundle: ...)`
    static func agendaItemTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.agendaItemTableViewCell)
    }
    
    /// `UINib(name: "AttachmentTableViewCell", bundle: ...)`
    static func attachmentTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.attachmentTableViewCell)
    }
    
    /// `UINib(name: "AutoCompletionTableCell", bundle: ...)`
    static func autoCompletionTableCell(_: Void) -> UINib {
      return UINib(resource: R.nib.autoCompletionTableCell)
    }
    
    /// `UINib(name: "CalendarViewController", bundle: ...)`
    static func calendarViewController(_: Void) -> UINib {
      return UINib(resource: R.nib.calendarViewController)
    }
    
    /// `UINib(name: "CommentTableViewCell", bundle: ...)`
    static func commentTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.commentTableViewCell)
    }
    
    /// `UINib(name: "ConversationTableViewCell", bundle: ...)`
    static func conversationTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.conversationTableViewCell)
    }
    
    /// `UINib(name: "DeliverableTableViewCell", bundle: ...)`
    static func deliverableTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.deliverableTableViewCell)
    }
    
    /// `UINib(name: "ItemLoadingViewController", bundle: ...)`
    static func itemLoadingViewController(_: Void) -> UINib {
      return UINib(resource: R.nib.itemLoadingViewController)
    }
    
    /// `UINib(name: "MemberTableViewCell", bundle: ...)`
    static func memberTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.memberTableViewCell)
    }
    
    /// `UINib(name: "NewMessageSeparatorCell", bundle: ...)`
    static func newMessageSeparatorCell(_: Void) -> UINib {
      return UINib(resource: R.nib.newMessageSeparatorCell)
    }
    
    /// `UINib(name: "OrganizationTableViewCell", bundle: ...)`
    static func organizationTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.organizationTableViewCell)
    }
    
    /// `UINib(name: "StartOfConversationView", bundle: ...)`
    static func startOfConversationView(_: Void) -> UINib {
      return UINib(resource: R.nib.startOfConversationView)
    }
    
    /// `UINib(name: "StreamTableViewCell", bundle: ...)`
    static func streamTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.streamTableViewCell)
    }
    
    /// `UINib(name: "TimelineAgendaItemTableViewCell", bundle: ...)`
    static func timelineAgendaItemTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.timelineAgendaItemTableViewCell)
    }
    
    /// `UINib(name: "TimelineDeliverableTableViewCell", bundle: ...)`
    static func timelineDeliverableTableViewCell(_: Void) -> UINib {
      return UINib(resource: R.nib.timelineDeliverableTableViewCell)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 12 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AgendaItemTableViewCell`.
    static let agendaItemTableViewCell: ReuseIdentifier<AgendaItemTableViewCell> = ReuseIdentifier(identifier: "AgendaItemTableViewCell")
    /// Reuse identifier `attachmentTableViewCell`.
    static let attachmentTableViewCell: ReuseIdentifier<AttachmentTableViewCell> = ReuseIdentifier(identifier: "attachmentTableViewCell")
    /// Reuse identifier `AutoCompletionTableCell`.
    static let autoCompletionTableCell: ReuseIdentifier<AutoCompletionTableCell> = ReuseIdentifier(identifier: "AutoCompletionTableCell")
    /// Reuse identifier `CommentTableViewCell`.
    static let commentTableViewCell: ReuseIdentifier<CommentTableViewCell> = ReuseIdentifier(identifier: "CommentTableViewCell")
    /// Reuse identifier `ConversationTableViewCell`.
    static let conversationTableViewCell: ReuseIdentifier<ConversationTableViewCell> = ReuseIdentifier(identifier: "ConversationTableViewCell")
    /// Reuse identifier `DeliverableTableViewCell`.
    static let deliverableTableViewCell: ReuseIdentifier<DeliverableTableViewCell> = ReuseIdentifier(identifier: "DeliverableTableViewCell")
    /// Reuse identifier `MemberTableViewCell`.
    static let memberTableViewCell: ReuseIdentifier<MemberTableViewCell> = ReuseIdentifier(identifier: "MemberTableViewCell")
    /// Reuse identifier `NewMessageSeparatorCell`.
    static let newMessageSeparatorCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "NewMessageSeparatorCell")
    /// Reuse identifier `OrganizationTableViewCell`.
    static let organizationTableViewCell: ReuseIdentifier<OrganizationTableViewCell> = ReuseIdentifier(identifier: "OrganizationTableViewCell")
    /// Reuse identifier `StreamTableViewCell`.
    static let streamTableViewCell: ReuseIdentifier<StreamTableViewCell> = ReuseIdentifier(identifier: "StreamTableViewCell")
    /// Reuse identifier `TimelineAgendaItemTableViewCell`.
    static let timelineAgendaItemTableViewCell: ReuseIdentifier<TimelineAgendaItemTableViewCell> = ReuseIdentifier(identifier: "TimelineAgendaItemTableViewCell")
    /// Reuse identifier `TimelineDeliverableTableViewCell`.
    static let timelineDeliverableTableViewCell: ReuseIdentifier<TimelineDeliverableTableViewCell> = ReuseIdentifier(identifier: "TimelineDeliverableTableViewCell")
    
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 8 view controllers.
  struct segue {
    /// This struct is generated for `AgendaItemViewController`, and contains static references to 1 segues.
    struct agendaItemViewController {
      /// Segue identifier `embed`.
      static let embed: StoryboardSegueIdentifier<UIStoryboardSegue, AgendaItemViewController, TimelineTableViewController> = StoryboardSegueIdentifier(identifier: "embed")
      
      /// Optionally returns a typed version of segue `embed`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func embed(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, AgendaItemViewController, TimelineTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.agendaItemViewController.embed, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `ConversationContentViewController`, and contains static references to 1 segues.
    struct conversationContentViewController {
      /// Segue identifier `embed`.
      static let embed: StoryboardSegueIdentifier<UIStoryboardSegue, ConversationContentViewController, MainPageViewController> = StoryboardSegueIdentifier(identifier: "embed")
      
      /// Optionally returns a typed version of segue `embed`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func embed(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, ConversationContentViewController, MainPageViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.conversationContentViewController.embed, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `ConversationViewController`, and contains static references to 1 segues.
    struct conversationViewController {
      /// Segue identifier `embedNavController`.
      static let embedNavController: StoryboardSegueIdentifier<UIStoryboardSegue, ConversationViewController, UINavigationController> = StoryboardSegueIdentifier(identifier: "embedNavController")
      
      /// Optionally returns a typed version of segue `embedNavController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func embedNavController(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, ConversationViewController, UINavigationController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.conversationViewController.embedNavController, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `CreateActionContentViewController`, and contains static references to 1 segues.
    struct createActionContentViewController {
      /// Segue identifier `pickAssignee`.
      static let pickAssignee: StoryboardSegueIdentifier<UIStoryboardSegue, CreateActionContentViewController, AssigneeSelectionViewController> = StoryboardSegueIdentifier(identifier: "pickAssignee")
      
      /// Optionally returns a typed version of segue `pickAssignee`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func pickAssignee(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, CreateActionContentViewController, AssigneeSelectionViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.createActionContentViewController.pickAssignee, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `CreateActionViewController`, and contains static references to 1 segues.
    struct createActionViewController {
      /// Segue identifier `embed`.
      static let embed: StoryboardSegueIdentifier<UIStoryboardSegue, CreateActionViewController, UINavigationController> = StoryboardSegueIdentifier(identifier: "embed")
      
      /// Optionally returns a typed version of segue `embed`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func embed(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, CreateActionViewController, UINavigationController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.createActionViewController.embed, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `DeliverableViewController`, and contains static references to 1 segues.
    struct deliverableViewController {
      /// Segue identifier `embed`.
      static let embed: StoryboardSegueIdentifier<UIStoryboardSegue, DeliverableViewController, TimelineTableViewController> = StoryboardSegueIdentifier(identifier: "embed")
      
      /// Optionally returns a typed version of segue `embed`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func embed(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, DeliverableViewController, TimelineTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.deliverableViewController.embed, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `OrganizationViewController`, and contains static references to 1 segues.
    struct organizationViewController {
      /// Segue identifier `embed`.
      static let embed: StoryboardSegueIdentifier<UIStoryboardSegue, OrganizationViewController, MainPageViewController> = StoryboardSegueIdentifier(identifier: "embed")
      
      /// Optionally returns a typed version of segue `embed`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func embed(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, OrganizationViewController, MainPageViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.organizationViewController.embed, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `OrganizationsViewController`, and contains static references to 1 segues.
    struct organizationsViewController {
      /// Segue identifier `embed`.
      static let embed: StoryboardSegueIdentifier<UIStoryboardSegue, OrganizationsViewController, OrganizationsTableViewController> = StoryboardSegueIdentifier(identifier: "embed")
      
      /// Optionally returns a typed version of segue `embed`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func embed(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, OrganizationsViewController, OrganizationsTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.organizationsViewController.embed, segue: segue)
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 9 storyboards.
  struct storyboard {
    /// Storyboard `AgendaItem`.
    static let agendaItem = _R.storyboard.agendaItem()
    /// Storyboard `Conversation`.
    static let conversation = _R.storyboard.conversation()
    /// Storyboard `Conversations`.
    static let conversations = _R.storyboard.conversations()
    /// Storyboard `Deliverable`.
    static let deliverable = _R.storyboard.deliverable()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Organization`.
    static let organization = _R.storyboard.organization()
    /// Storyboard `Organizations`.
    static let organizations = _R.storyboard.organizations()
    
    /// `UIStoryboard(name: "AgendaItem", bundle: ...)`
    static func agendaItem(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.agendaItem)
    }
    
    /// `UIStoryboard(name: "Conversation", bundle: ...)`
    static func conversation(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.conversation)
    }
    
    /// `UIStoryboard(name: "Conversations", bundle: ...)`
    static func conversations(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.conversations)
    }
    
    /// `UIStoryboard(name: "Deliverable", bundle: ...)`
    static func deliverable(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.deliverable)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Organization", bundle: ...)`
    static func organization(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.organization)
    }
    
    /// `UIStoryboard(name: "Organizations", bundle: ...)`
    static func organizations(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.organizations)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "com.sizung.app.ios") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _AgendaItemTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = AgendaItemTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "AgendaItemTableViewCell"
      let name = "AgendaItemTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AgendaItemTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? AgendaItemTableViewCell
      }
      
      private init() {}
    }
    
    struct _AttachmentTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = AttachmentTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "attachmentTableViewCell"
      let name = "AttachmentTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AttachmentTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? AttachmentTableViewCell
      }
      
      private init() {}
    }
    
    struct _AutoCompletionTableCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = AutoCompletionTableCell
      
      let bundle = _R.hostingBundle
      let identifier = "AutoCompletionTableCell"
      let name = "AutoCompletionTableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AutoCompletionTableCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? AutoCompletionTableCell
      }
      
      private init() {}
    }
    
    struct _CalendarViewController: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "CalendarViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CalendarViewController? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? CalendarViewController
      }
      
      private init() {}
    }
    
    struct _CommentTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = CommentTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "CommentTableViewCell"
      let name = "CommentTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CommentTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? CommentTableViewCell
      }
      
      private init() {}
    }
    
    struct _ConversationTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = ConversationTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "ConversationTableViewCell"
      let name = "ConversationTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ConversationTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? ConversationTableViewCell
      }
      
      private init() {}
    }
    
    struct _DeliverableTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = DeliverableTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "DeliverableTableViewCell"
      let name = "DeliverableTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DeliverableTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? DeliverableTableViewCell
      }
      
      private init() {}
    }
    
    struct _ItemLoadingViewController: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "ItemLoadingViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      private init() {}
    }
    
    struct _MemberTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = MemberTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "MemberTableViewCell"
      let name = "MemberTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MemberTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? MemberTableViewCell
      }
      
      private init() {}
    }
    
    struct _NewMessageSeparatorCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = UITableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "NewMessageSeparatorCell"
      let name = "NewMessageSeparatorCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UITableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UITableViewCell
      }
      
      private init() {}
    }
    
    struct _OrganizationTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = OrganizationTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "OrganizationTableViewCell"
      let name = "OrganizationTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrganizationTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? OrganizationTableViewCell
      }
      
      private init() {}
    }
    
    struct _StartOfConversationView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "StartOfConversationView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      private init() {}
    }
    
    struct _StreamTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = StreamTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "StreamTableViewCell"
      let name = "StreamTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> StreamTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? StreamTableViewCell
      }
      
      private init() {}
    }
    
    struct _TimelineAgendaItemTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = TimelineAgendaItemTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "TimelineAgendaItemTableViewCell"
      let name = "TimelineAgendaItemTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TimelineAgendaItemTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TimelineAgendaItemTableViewCell
      }
      
      private init() {}
    }
    
    struct _TimelineDeliverableTableViewCell: NibResourceType, ReuseIdentifierType {
      typealias ReusableType = TimelineDeliverableTableViewCell
      
      let bundle = _R.hostingBundle
      let identifier = "TimelineDeliverableTableViewCell"
      let name = "TimelineDeliverableTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TimelineDeliverableTableViewCell? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TimelineDeliverableTableViewCell
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try deliverable.validate()
      try organization.validate()
      try agendaItem.validate()
      try conversation.validate()
      try conversations.validate()
      try main.validate()
    }
    
    struct agendaItem: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AgendaItemViewController
      
      let bundle = _R.hostingBundle
      let create = StoryboardViewControllerResource<CreateAgendaItemViewController>(identifier: "create")
      let name = "AgendaItem"
      
      func create(_: Void) -> CreateAgendaItemViewController? {
        return UIStoryboard(resource: self).instantiateViewController(create)
      }
      
      static func validate() throws {
        if UIImage(named: "agenda_title") == nil { throw ValidationError(description: "[R.swift] Image named 'agenda_title' is used in storyboard 'AgendaItem', but couldn't be loaded.") }
        if UIImage(named: "close") == nil { throw ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'AgendaItem', but couldn't be loaded.") }
        if _R.storyboard.agendaItem().create() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'create' could not be loaded from storyboard 'AgendaItem' as 'CreateAgendaItemViewController'.") }
      }
      
      private init() {}
    }
    
    struct conversation: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ConversationViewController
      
      let agendaItemsTableViewController = StoryboardViewControllerResource<AgendaItemsTableViewController>(identifier: "AgendaItemsTableViewController")
      let bundle = _R.hostingBundle
      let conversationContentViewController = StoryboardViewControllerResource<ConversationContentViewController>(identifier: "ConversationContentViewController")
      let conversationDeliverablesTableViewController = StoryboardViewControllerResource<DeliverablesTableViewController>(identifier: "ConversationDeliverablesTableViewController")
      let name = "Conversation"
      let timelineTableViewController = StoryboardViewControllerResource<TimelineTableViewController>(identifier: "TimelineTableViewController")
      
      func agendaItemsTableViewController(_: Void) -> AgendaItemsTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(agendaItemsTableViewController)
      }
      
      func conversationContentViewController(_: Void) -> ConversationContentViewController? {
        return UIStoryboard(resource: self).instantiateViewController(conversationContentViewController)
      }
      
      func conversationDeliverablesTableViewController(_: Void) -> DeliverablesTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(conversationDeliverablesTableViewController)
      }
      
      func timelineTableViewController(_: Void) -> TimelineTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(timelineTableViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "close") == nil { throw ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'Conversation', but couldn't be loaded.") }
        if _R.storyboard.conversation().conversationContentViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'conversationContentViewController' could not be loaded from storyboard 'Conversation' as 'ConversationContentViewController'.") }
        if _R.storyboard.conversation().timelineTableViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'timelineTableViewController' could not be loaded from storyboard 'Conversation' as 'TimelineTableViewController'.") }
        if _R.storyboard.conversation().conversationDeliverablesTableViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'conversationDeliverablesTableViewController' could not be loaded from storyboard 'Conversation' as 'DeliverablesTableViewController'.") }
        if _R.storyboard.conversation().agendaItemsTableViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'agendaItemsTableViewController' could not be loaded from storyboard 'Conversation' as 'AgendaItemsTableViewController'.") }
      }
      
      private init() {}
    }
    
    struct conversations: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ConversationsViewController
      
      let bundle = _R.hostingBundle
      let conversationsTableViewController = StoryboardViewControllerResource<ConversationsTableViewController>(identifier: "ConversationsTableViewController")
      let create = StoryboardViewControllerResource<CreateConversationViewController>(identifier: "create")
      let name = "Conversations"
      
      func conversationsTableViewController(_: Void) -> ConversationsTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(conversationsTableViewController)
      }
      
      func create(_: Void) -> CreateConversationViewController? {
        return UIStoryboard(resource: self).instantiateViewController(create)
      }
      
      static func validate() throws {
        if UIImage(named: "close") == nil { throw ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'Conversations', but couldn't be loaded.") }
        if _R.storyboard.conversations().create() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'create' could not be loaded from storyboard 'Conversations' as 'CreateConversationViewController'.") }
        if _R.storyboard.conversations().conversationsTableViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'conversationsTableViewController' could not be loaded from storyboard 'Conversations' as 'ConversationsTableViewController'.") }
      }
      
      private init() {}
    }
    
    struct deliverable: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DeliverableViewController
      
      let bundle = _R.hostingBundle
      let create = StoryboardViewControllerResource<CreateActionViewController>(identifier: "create")
      let createActionContentViewController = StoryboardViewControllerResource<CreateActionContentViewController>(identifier: "CreateActionContentViewController")
      let name = "Deliverable"
      
      func create(_: Void) -> CreateActionViewController? {
        return UIStoryboard(resource: self).instantiateViewController(create)
      }
      
      func createActionContentViewController(_: Void) -> CreateActionContentViewController? {
        return UIStoryboard(resource: self).instantiateViewController(createActionContentViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "action_title") == nil { throw ValidationError(description: "[R.swift] Image named 'action_title' is used in storyboard 'Deliverable', but couldn't be loaded.") }
        if UIImage(named: "close") == nil { throw ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'Deliverable', but couldn't be loaded.") }
        if _R.storyboard.deliverable().create() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'create' could not be loaded from storyboard 'Deliverable' as 'CreateActionViewController'.") }
        if _R.storyboard.deliverable().createActionContentViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'createActionContentViewController' could not be loaded from storyboard 'Deliverable' as 'CreateActionContentViewController'.") }
      }
      
      private init() {}
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      private init() {}
    }
    
    struct login: StoryboardResourceWithInitialControllerType {
      typealias InitialController = LoginViewController
      
      let bundle = _R.hostingBundle
      let name = "Login"
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoadingViewController
      
      let bundle = _R.hostingBundle
      let loading = StoryboardViewControllerResource<LoadingViewController>(identifier: "Loading")
      let name = "Main"
      
      func loading(_: Void) -> LoadingViewController? {
        return UIStoryboard(resource: self).instantiateViewController(loading)
      }
      
      static func validate() throws {
        if UIImage(named: "logo") == nil { throw ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().loading() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'loading' could not be loaded from storyboard 'Main' as 'LoadingViewController'.") }
      }
      
      private init() {}
    }
    
    struct organization: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = OrganizationViewController
      
      let accountViewController = StoryboardViewControllerResource<AccountViewController>(identifier: "AccountViewController")
      let agendaItemsTableViewController = StoryboardViewControllerResource<AgendaItemsTableViewController>(identifier: "AgendaItemsTableViewController")
      let bundle = _R.hostingBundle
      let mainViewController = StoryboardViewControllerResource<OrganizationViewController>(identifier: "MainViewController")
      let name = "Organization"
      let streamTableViewController = StoryboardViewControllerResource<StreamTableViewController>(identifier: "StreamTableViewController")
      let userDeliverablesTableViewController = StoryboardViewControllerResource<DeliverablesTableViewController>(identifier: "UserDeliverablesTableViewController")
      
      func accountViewController(_: Void) -> AccountViewController? {
        return UIStoryboard(resource: self).instantiateViewController(accountViewController)
      }
      
      func agendaItemsTableViewController(_: Void) -> AgendaItemsTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(agendaItemsTableViewController)
      }
      
      func mainViewController(_: Void) -> OrganizationViewController? {
        return UIStoryboard(resource: self).instantiateViewController(mainViewController)
      }
      
      func streamTableViewController(_: Void) -> StreamTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(streamTableViewController)
      }
      
      func userDeliverablesTableViewController(_: Void) -> DeliverablesTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(userDeliverablesTableViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "close") == nil { throw ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'Organization', but couldn't be loaded.") }
        if UIImage(named: "group_list") == nil { throw ValidationError(description: "[R.swift] Image named 'group_list' is used in storyboard 'Organization', but couldn't be loaded.") }
        if UIImage(named: "priority") == nil { throw ValidationError(description: "[R.swift] Image named 'priority' is used in storyboard 'Organization', but couldn't be loaded.") }
        if _R.storyboard.organization().agendaItemsTableViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'agendaItemsTableViewController' could not be loaded from storyboard 'Organization' as 'AgendaItemsTableViewController'.") }
        if _R.storyboard.organization().accountViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'accountViewController' could not be loaded from storyboard 'Organization' as 'AccountViewController'.") }
        if _R.storyboard.organization().mainViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Organization' as 'OrganizationViewController'.") }
        if _R.storyboard.organization().userDeliverablesTableViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'userDeliverablesTableViewController' could not be loaded from storyboard 'Organization' as 'DeliverablesTableViewController'.") }
        if _R.storyboard.organization().streamTableViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'streamTableViewController' could not be loaded from storyboard 'Organization' as 'StreamTableViewController'.") }
      }
      
      private init() {}
    }
    
    struct organizations: StoryboardResourceWithInitialControllerType {
      typealias InitialController = OrganizationsViewController
      
      let bundle = _R.hostingBundle
      let name = "Organizations"
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}